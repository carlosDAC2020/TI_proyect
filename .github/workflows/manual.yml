# This is a basic workflow that is manually triggered

name: Manual workflow

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set image tag with timestamp
        id: set_tag
        run: echo "IMAGE_TAG=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Login to Docker Hub
        env:
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        run: echo $DOCKER_TOKEN | docker login --username cdapdev2020 --password-stdin

      - name: Build Docker image DB
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          cd BD-Postgres
          docker build -t cdapdev2020/db-trueshield:${{ env.IMAGE_TAG }} .
      
      - name: Build images
        run: |
          cd manager-server
          docker build -t cdapdev2020/dj-manager-server:${{ env.IMAGE_TAG }} .
          cd ..
          cd rss-api
          docker build -t cdapdev2020/rss-api:${{ env.IMAGE_TAG }} .
          cd ..
          cd angular-client
          docker build -t cdapdev2020/angular-clinet:${{ env.IMAGE_TAG }} .


      - name: Push image
        run: |
          docker push cdapdev2020/dj-manager-server:${{ env.IMAGE_TAG }}
          docker push cdapdev2020/rss-api:${{ env.IMAGE_TAG }}
          docker push cdapdev2020/angular-clinet:${{ env.IMAGE_TAG }}
          docker push cdapdev2020/db-trueshield:${{ env.IMAGE_TAG }} 
  deploy:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
    - uses: actions/checkout@v4
    - name: Generate SSH key pair
      run: |
        ssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa -N ""

    - name: Run Terraform
      env: 
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
          cd terraform 
          set -e 

          terraform init -input=false
          terraform apply -var="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -var="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -auto-approve
